# discretize TRAIN
DISC <- mdlp.rank(x_train, y_train, method = "kendall")
x_train_d = DISC$Disc.data
# mine LR rules
rulz <- aflrC7(x_train_d, y, msup = 1, mconf = 70, mlift = 0, mimp = 0, theta = 0, Xmx = "2000M")
# discretize TEST
x_test_d <- sapply(1:nrow(x_test), function(j){
findInterval(x_test[,j], c(-Inf, D$cutp[[j]], Inf))
})
# predict LRARs
y_predict <- crank(rulz, x_test_d, y_test, std, m2, mt)
# evaluate predictions
tau <- mean(sapply(1:nrow(y_test), function(j) cor(y_test[j,], y_predict[,j], method="kendall")))
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
rankings <- out[,c(3,4,11,15,29)]
## split in independent variables (x) and votes (y)
y <- t(apply(-rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x_train <- x[train_ind, ]
x_test <- x[-train_ind, ]
y_train <- y[train_ind, ]
y_test <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x_train, y_train, method = "kendall")
x_train_d = DISC$Disc.data
# mine LR rules
rulz <- aflrC7(x_train_d, y_train, msup = 1, mconf = 70, mlift = 0, mimp = 0, theta = 0, Xmx = "2000M")
# discretize TEST
x_test_d <- sapply(1:nrow(x_test), function(j){
findInterval(x_test[,j], c(-Inf, D$cutp[[j]], Inf))
})
# predict LRARs
y_predict <- crank(rulz, x_test_d, y_test, std, m2, mt)
# evaluate predictions
tau <- mean(sapply(1:nrow(y_test), function(j) cor(y_test[j,], y_predict[,j], method="kendall")))
DISC <- mdlp.rank(x_train, y_train, method = "kendall")
rulz <- aflrC7(x_train_d, y_train, msup = 1, mconf = 70, mlift = 0, mimp = 0, theta = 0, Xmx = "2000M")
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
rankings <- out[,c(3,4,11,15,29)]
## split in independent variables (x) and votes (y)
y <- t(apply(-rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x_train <- x[train_ind, ]
x_test <- x[-train_ind, ]
y_train <- y[train_ind, ]
y_test <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x_train, y_train, method = "kendall")
x_train_d = DISC$Disc.data
head(x_train_d)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
rankings <- out[,c(3,4,11,15,29)]
## split in independent variables (x) and votes (y)
y <- t(apply(-rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x_train <- x[train_ind, ]
x_test <- x[-train_ind, ]
y_train <- y[train_ind, ]
y_test <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x_train, y_train, method = "kendall")
x_train_d = DISC$Disc.data
head(y_train)
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
#rankings <- out[,c(3,4,11,15,29)]
rankings <- out[,c(33:37)]
## split in independent variables (x) and votes (y)
#y <- t(apply(-rankings, 1, rank))
y <- t(apply(rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
head(x)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
#rankings <- out[,c(3,4,11,15,29)]
rankings <- out[,c(33:37)]
## split in independent variables (x) and votes (y)
#y <- t(apply(-rankings, 1, rank))
y <- t(apply(rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
head(y)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
#rankings <- out[,c(3,4,11,15,29)]
rankings <- out[,c(33:37)]
## split in independent variables (x) and votes (y)
#y <- t(apply(-rankings, 1, rank))
y <- t(apply(rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
head(x)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
#rankings <- out[,c(3,4,11,15,29)]
rankings <- out[,c(33:37)]
## split in independent variables (x) and votes (y)
#y <- t(apply(-rankings, 1, rank))
y <- t(apply(rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
head(xs)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
#rankings <- out[,c(3,4,11,15,29)]
rankings <- out[,c(33:37)]
## split in independent variables (x) and votes (y)
#y <- t(apply(-rankings, 1, rank))
y <- t(apply(rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
head(xs)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
#rankings <- out[,c(3,4,11,15,29)]
rankings <- out[,c(33:37)]
## split in independent variables (x) and votes (y)
#y <- t(apply(-rankings, 1, rank))
y <- t(apply(rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
head(xs)
# discretize TRAIN
DISC <- mdlp.rank(x, y, method = "kendall")
xd = DISC$Disc.data
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
#rankings <- out[,c(3,4,11,15,29)]
rankings <- out[,c(33:37)]
## split in independent variables (x) and votes (y)
#y <- t(apply(-rankings, 1, rank))
y <- t(apply(rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x, y, method = "kendall")
xd = DISC$Disc.data
head(xd)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
# read DATA
out <- read.csv("../out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
#rankings <- out[,c(3,4,11,15,29)]
rankings <- out[,c(33:37)]
## split in independent variables (x) and votes (y)
#y <- t(apply(-rankings, 1, rank))
y <- t(apply(rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x, y, method = "kendall")
xd = DISC$Disc.data
head(xd)
out <- read.csv("../data/out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# load dependencies
require("carenR")
#source("~/Downloads/LRAR/predictLRAR.R")
#source("~/Downloads/LRAR/caren.R")
source("edira/edira.R")
source("LRAR/caren_integrated.R")
source("LRAR/caren.R")
source("LRAR/mcp.R")
source("LRAR/predictLRAR.R")
# read DATA
out <- read.csv("../data/out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
rankings <- out[,c(3,4,11,15,29)]
## split in independent variables (x) and votes (y)
y <- t(apply(-rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x, y, method = "kendall")
xd = DISC$Disc.data
rulz <- aflrC7(xd, y, msup = 1, mconf = 70, mlift = 0, mimp = 0, theta = 0, Xmx = "2000M")
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
# load dependencies
require("carenR")
#source("~/Downloads/LRAR/predictLRAR.R")
#source("~/Downloads/LRAR/caren.R")
source("edira/edira.R")
#source("LRAR/caren_integrated.R")
source("LRAR/caren.R")
source("LRAR/mcp.R")
source("LRAR/predictLRAR.R")
# read DATA
out <- read.csv("../data/out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
rankings <- out[,c(3,4,11,15,29)]
## split in independent variables (x) and votes (y)
y <- t(apply(-rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x, y, method = "kendall")
xd = DISC$Disc.data
# mine LR rules
rulz <- aflrC7(xd, y, msup = 1, mconf = 70, mlift = 0, mimp = 0, theta = 0, Xmx = "2000M")
# discretize TEST
xsd <- sapply(1:nrow(xs), function(j){
findInterval(xs[,j], c(-Inf, DISC$cutp[[j]], Inf))
})
# predict LRARs
yp <- crank(rulz, xsd, ys, std, m2, mt)
# evaluate predictions
tau <- mean(sapply(1:nrow(ys), function(j) cor(ys[j,], yp[,j], method="kendall")))
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
# load dependencies
require("carenR")
#source("~/Downloads/LRAR/predictLRAR.R")
#source("~/Downloads/LRAR/caren.R")
source("edira/edira.R")
source("LRAR/caren.R")
source("LRAR/predictLRAR.R")
# read DATA
out <- read.csv("../data/out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
rankings <- out[,c(3,4,11,15,29)]
## split in independent variables (x) and votes (y)
y <- t(apply(-rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x, y, method = "kendall")
xd = DISC$Disc.data
# mine LR rules
rulz <- aflrC7(xd, y, msup = 1, mconf = 70, mlift = 0, mimp = 0, theta = 0, Xmx = "2000M")
# discretize TEST
xsd <- sapply(1:nrow(xs), function(j){
findInterval(xs[,j], c(-Inf, DISC$cutp[[j]], Inf))
})
# predict LRARs
yp <- crank(rulz, xsd, ys, std, m2, mt)
# evaluate predictions
tau <- mean(sapply(1:nrow(ys), function(j) cor(ys[j,], yp[,j], method="kendall")))
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("edira/edira.R")
#source("LRAR/caren.R")
#source("LRAR/predictLRAR.R")
# read DATA
out <- read.csv("../data/out_german_based.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
rankings <- out[,c(3,4,11,15,29)]
## split in independent variables (x) and votes (y)
y <- t(apply(-rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x, y, method = "kendall")
xd = DISC$Disc.data
# mine LR rules
rulz <- aflrC7(xd, y, msup = 1, mconf = 70, mlift = 0, mimp = 0, theta = 0, Xmx = "2000M")
# discretize TEST
xsd <- sapply(1:nrow(xs), function(j){
findInterval(xs[,j], c(-Inf, DISC$cutp[[j]], Inf))
})
# predict LRARs
yp <- crank(rulz, xsd, ys, std, m2, mt)
# evaluate predictions
tau <- mean(sapply(1:nrow(ys), function(j) cor(ys[j,], yp[,j], method="kendall")))
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
source('~/master-dissertation/r/demoCaren.R', echo=TRUE)
# load dependencies
require("carenR")
source("~/Downloads/LRAR/predictLRAR.R")
source("~/Downloads/LRAR/caren.R")
source("~/Downloads/edira-master/edira.R")
#source("LRAR/caren.R")
#source("LRAR/predictLRAR.R")
# read DATA
out <- read.csv("../data/out_german.csv", sep = ";", stringsAsFactors=FALSE, fileEncoding="latin1")
# transform DATA
## select rows of relevant parties
rankings <- out[,c(3,4,11,15,29)]
## split in independent variables (x) and votes (y)
y <- t(apply(rankings, 1, rank))
x <- out[,-c(0:33)]
## sample size percentage for TRAIN
smp_size <- floor(0.75 * nrow(x))
## set the seed to make the partition reproductible
set.seed(123)
## split
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
x <- x[train_ind, ]
xs <- x[-train_ind, ]
y <- y[train_ind, ]
ys <- y[-train_ind, ]
# discretize TRAIN
DISC <- mdlp.rank(x, y, method = "kendall")
xd = DISC$Disc.data
rulz <- aflrC7(xd, y, msup = 1, mconf = 70, mlift = 0, mimp = 0, theta = 0, Xmx = "2000M")
