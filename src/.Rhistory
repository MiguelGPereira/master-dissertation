dataframe[dataframe[,"dataset"]=="glass","labels"] <- 6
dataframe[dataframe[,"dataset"]=="housing","labels"] <- 6
dataframe[dataframe[,"dataset"]=="stock","labels"] <- 5
dataframe[dataframe[,"dataset"]=="vehicle","labels"] <- 4
dataframe[dataframe[,"dataset"]=="wine","labels"] <- 3
dataframe[dataframe[,"dataset"]=="cpu-small","labels"] <- 5
dataframe[dataframe[,"dataset"]=="german2005_2009","labels"] <- 5
dataframe[dataframe[,"dataset"]=="portugal2013_2017","labels"] <- 5
dataframe[dataframe[,"dataset"]=="portugal2009_2013","labels"] <- 5
dataframe$gamma=as.numeric(levels(dataframe$gamma))[dataframe$gamma]
dataframe$accuracy=as.numeric(levels(dataframe$accuracy))[dataframe$accuracy]
dataframe$completeness=as.numeric(levels(dataframe$completeness))[dataframe$completeness]
#ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
#ggplot(dataframe, aes(x=accuracy, y=completeness, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+coord_fixed()+facet_wrap(~dataset, nrow = 2, ncol = 4)
ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=labels))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
library(ggplot2)
#datasets mini 2
# dataset = c("authorship", "authorship", "authorship", "authorship", "cpu-small", "cpu-small", "cpu-small", "cpu-small","wisconsin")
# gamma=c(0.72,0.9,0.94,0.89,0.77,0.71,0.61,0.33,0.56)
# completeness=c(0.17,0.33,0.5,0.67,0.1,0.2,0.3,0.4,0.01)
# accuracy=c(0.86,0.88,0.95,0.91,0.88,0.77,0.54,0.13,0.78)
# dataframe = data.frame(dataset, gamma, completeness, accuracy)
#
# ggplot(dataframe, aes(x=accuracy, y=completeness))+geom_point()+facet_wrap(~dataset)
#eleicoes
# dataset = c("germany 05-09","germany 05-09","germany 05-09","germany 05-09","germany 05-09"
#             , "portugal 09-13", "portugal 09-13", "portugal 09-13", "portugal 09-13", "portugal 09-13"
#             , "portugal 13-17", "portugal 13-17", "portugal 13-17", "portugal 13-17", "portugal 13-17")
# gamma=c(0.5,0.78,0.84,0.85,0.96
#         ,0.3,0.57,0.69,0.72,0.69
#         ,0.31,0.47,0.65,0.66,0.65)
# completeness=c(0.1,0.2,0.3,0.4,0.5
#                ,0.1,0.2,0.3,0.4,0.5
#                ,0.1,0.2,0.3,0.4,0.5)
# accuracy=c(0.75,0.8,0.83,0.82,0.9
#            ,0.6,0.58,0.65,0.62,0.58
#            ,0.63,0.62,0.66,0.62,0.58)
# dataframe = data.frame(dataset, gamma, completeness, accuracy)
#
# ggplot(dataframe, aes(x=accuracy, y=completeness))+geom_point()+facet_wrap(~dataset)
#
# outputs <- list()
# outputs <- append(outputs, c("germany 05-09", 0.5,0.1,0.75))
# outputs <- append(outputs, c("portugal 09-13", 0.78,0.8,0.58))
dataset <- list()
gamma <- list()
completeness <- list()
accuracy <- list()
rules <- list()
processFile = function(filepath) {
con = file(filepath, "r")
while (TRUE) {
line = readLines(con, n = 1)
if (length(line) == 0) {
break
}
if (substr(line, 0, 8) == "%RFORMAT") {
data <- strsplit(line, "%")
dataset <<- c(dataset,data[[1]][3])
gamma <<- c(gamma,data[[1]][7])
#cat(data[[1]][3],data[[1]][7],"\n",sep = "    ")
completeness <<- c(completeness,data[[1]][8])
accuracy <<- c(accuracy,data[[1]][9])
rules <<- c(rules,data[[1]][11])
}
}
close(con)
}
processFile("job-datasets-pairwise-NEW")
dataset <- sapply( dataset, paste0, collapse="")
gamma <- sapply( gamma, paste0, collapse="")
completeness <- sapply( completeness, paste0, collapse="")
accuracy <- sapply( accuracy, paste0, collapse="")
rules <- sapply( rules, paste0, collapse="")
dataframe <- data.frame(dataset, gamma, completeness, accuracy)
dataframe <- cbind(dataframe, labels = NA)
dataframe[dataframe[,"dataset"]=="iris","labels"] <- 3
dataframe[dataframe[,"dataset"]=="bodyfat","labels"] <- 7
dataframe[dataframe[,"dataset"]=="glass","labels"] <- 6
dataframe[dataframe[,"dataset"]=="housing","labels"] <- 6
dataframe[dataframe[,"dataset"]=="stock","labels"] <- 5
dataframe[dataframe[,"dataset"]=="vehicle","labels"] <- 4
dataframe[dataframe[,"dataset"]=="wine","labels"] <- 3
dataframe[dataframe[,"dataset"]=="cpu-small","labels"] <- 5
dataframe[dataframe[,"dataset"]=="german2005_2009","labels"] <- 5
dataframe[dataframe[,"dataset"]=="portugal2013_2017","labels"] <- 5
dataframe[dataframe[,"dataset"]=="portugal2009_2013","labels"] <- 5
dataframe$gamma=as.numeric(levels(dataframe$gamma))[dataframe$gamma]
dataframe$accuracy=as.numeric(levels(dataframe$accuracy))[dataframe$accuracy]
dataframe$completeness=as.numeric(levels(dataframe$completeness))[dataframe$completeness]
#ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
#ggplot(dataframe, aes(x=accuracy, y=completeness, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+coord_fixed()+facet_wrap(~dataset, nrow = 2, ncol = 4)
ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=labels))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
ggplot(dataframe, aes(x=gamma, y=completeness, group=dataset, color=labels))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
ggplot(dataframe, aes(x=gamma, y=completeness, group=dataset, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
ggplot(dataframe, aes(x=gamma, y=completeness, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+coord_fixed()+facet_wrap(~dataset, nrow = 2, ncol = 4)
ggplot(dataframe, aes(x=gamma, y=completeness, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+coord_fixed()+facet_wrap(~dataset, nrow = 2, ncol = 4)
ggplot(dataframe, aes(x=accuracy, y=completeness, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+coord_fixed()+facet_wrap(~dataset, nrow = 2, ncol = 4)
ggplot(dataframe, aes(x=accuracy, y=completeness, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+coord_fixed()+facet_wrap(~dataset, nrow = 2, ncol = 4)
ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=labels))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
library(ggplot2)
#datasets mini 2
# dataset = c("authorship", "authorship", "authorship", "authorship", "cpu-small", "cpu-small", "cpu-small", "cpu-small","wisconsin")
# gamma=c(0.72,0.9,0.94,0.89,0.77,0.71,0.61,0.33,0.56)
# completeness=c(0.17,0.33,0.5,0.67,0.1,0.2,0.3,0.4,0.01)
# accuracy=c(0.86,0.88,0.95,0.91,0.88,0.77,0.54,0.13,0.78)
# dataframe = data.frame(dataset, gamma, completeness, accuracy)
#
# ggplot(dataframe, aes(x=accuracy, y=completeness))+geom_point()+facet_wrap(~dataset)
#eleicoes
# dataset = c("germany 05-09","germany 05-09","germany 05-09","germany 05-09","germany 05-09"
#             , "portugal 09-13", "portugal 09-13", "portugal 09-13", "portugal 09-13", "portugal 09-13"
#             , "portugal 13-17", "portugal 13-17", "portugal 13-17", "portugal 13-17", "portugal 13-17")
# gamma=c(0.5,0.78,0.84,0.85,0.96
#         ,0.3,0.57,0.69,0.72,0.69
#         ,0.31,0.47,0.65,0.66,0.65)
# completeness=c(0.1,0.2,0.3,0.4,0.5
#                ,0.1,0.2,0.3,0.4,0.5
#                ,0.1,0.2,0.3,0.4,0.5)
# accuracy=c(0.75,0.8,0.83,0.82,0.9
#            ,0.6,0.58,0.65,0.62,0.58
#            ,0.63,0.62,0.66,0.62,0.58)
# dataframe = data.frame(dataset, gamma, completeness, accuracy)
#
# ggplot(dataframe, aes(x=accuracy, y=completeness))+geom_point()+facet_wrap(~dataset)
#
# outputs <- list()
# outputs <- append(outputs, c("germany 05-09", 0.5,0.1,0.75))
# outputs <- append(outputs, c("portugal 09-13", 0.78,0.8,0.58))
dataset <- list()
gamma <- list()
completeness <- list()
accuracy <- list()
rules <- list()
processFile = function(filepath) {
con = file(filepath, "r")
while (TRUE) {
line = readLines(con, n = 1)
if (length(line) == 0) {
break
}
if (substr(line, 0, 8) == "%RFORMAT") {
data <- strsplit(line, "%")
dataset <<- c(dataset,data[[1]][3])
gamma <<- c(gamma,data[[1]][7])
cat(data[[1]][3],data[[1]][7],"\n",sep = "    ")
completeness <<- c(completeness,data[[1]][8])
accuracy <<- c(accuracy,data[[1]][9])
rules <<- c(rules,data[[1]][11])
}
}
close(con)
}
processFile("job-datasets-pairwise-NEW")
dataset <- sapply( dataset, paste0, collapse="")
gamma <- sapply( gamma, paste0, collapse="")
completeness <- sapply( completeness, paste0, collapse="")
accuracy <- sapply( accuracy, paste0, collapse="")
rules <- sapply( rules, paste0, collapse="")
dataframe <- data.frame(dataset, gamma, completeness, accuracy)
dataframe <- cbind(dataframe, labels = NA)
dataframe[dataframe[,"dataset"]=="iris","labels"] <- 3
dataframe[dataframe[,"dataset"]=="bodyfat","labels"] <- 7
dataframe[dataframe[,"dataset"]=="glass","labels"] <- 6
dataframe[dataframe[,"dataset"]=="housing","labels"] <- 6
dataframe[dataframe[,"dataset"]=="stock","labels"] <- 5
dataframe[dataframe[,"dataset"]=="vehicle","labels"] <- 4
dataframe[dataframe[,"dataset"]=="wine","labels"] <- 3
dataframe[dataframe[,"dataset"]=="cpu-small","labels"] <- 5
dataframe[dataframe[,"dataset"]=="german2005_2009","labels"] <- 5
dataframe[dataframe[,"dataset"]=="portugal2013_2017","labels"] <- 5
dataframe[dataframe[,"dataset"]=="portugal2009_2013","labels"] <- 5
dataframe$gamma=as.numeric(levels(dataframe$gamma))[dataframe$gamma]
dataframe$accuracy=as.numeric(levels(dataframe$accuracy))[dataframe$accuracy]
dataframe$completeness=as.numeric(levels(dataframe$completeness))[dataframe$completeness]
ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
ggplot(dataframe, aes(x=accuracy, y=completeness, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+coord_fixed()+facet_wrap(~dataset, nrow = 2, ncol = 4)
ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=labels))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
library(ggplot2)
#datasets mini 2
# dataset = c("authorship", "authorship", "authorship", "authorship", "cpu-small", "cpu-small", "cpu-small", "cpu-small","wisconsin")
# gamma=c(0.72,0.9,0.94,0.89,0.77,0.71,0.61,0.33,0.56)
# completeness=c(0.17,0.33,0.5,0.67,0.1,0.2,0.3,0.4,0.01)
# accuracy=c(0.86,0.88,0.95,0.91,0.88,0.77,0.54,0.13,0.78)
# dataframe = data.frame(dataset, gamma, completeness, accuracy)
#
# ggplot(dataframe, aes(x=accuracy, y=completeness))+geom_point()+facet_wrap(~dataset)
#eleicoes
# dataset = c("germany 05-09","germany 05-09","germany 05-09","germany 05-09","germany 05-09"
#             , "portugal 09-13", "portugal 09-13", "portugal 09-13", "portugal 09-13", "portugal 09-13"
#             , "portugal 13-17", "portugal 13-17", "portugal 13-17", "portugal 13-17", "portugal 13-17")
# gamma=c(0.5,0.78,0.84,0.85,0.96
#         ,0.3,0.57,0.69,0.72,0.69
#         ,0.31,0.47,0.65,0.66,0.65)
# completeness=c(0.1,0.2,0.3,0.4,0.5
#                ,0.1,0.2,0.3,0.4,0.5
#                ,0.1,0.2,0.3,0.4,0.5)
# accuracy=c(0.75,0.8,0.83,0.82,0.9
#            ,0.6,0.58,0.65,0.62,0.58
#            ,0.63,0.62,0.66,0.62,0.58)
# dataframe = data.frame(dataset, gamma, completeness, accuracy)
#
# ggplot(dataframe, aes(x=accuracy, y=completeness))+geom_point()+facet_wrap(~dataset)
#
# outputs <- list()
# outputs <- append(outputs, c("germany 05-09", 0.5,0.1,0.75))
# outputs <- append(outputs, c("portugal 09-13", 0.78,0.8,0.58))
dataset <- list()
gamma <- list()
completeness <- list()
accuracy <- list()
rules <- list()
processFile = function(filepath) {
con = file(filepath, "r")
while (TRUE) {
line = readLines(con, n = 1)
if (length(line) == 0) {
break
}
if (substr(line, 0, 8) == "%RFORMAT") {
data <- strsplit(line, "%")
dataset <<- c(dataset,data[[1]][3])
gamma <<- c(gamma,data[[1]][7])
#cat(data[[1]][3],data[[1]][7],"\n",sep = "    ")
completeness <<- c(completeness,data[[1]][8])
accuracy <<- c(accuracy,data[[1]][9])
rules <<- c(rules,data[[1]][11])
}
}
close(con)
}
processFile("job-all-pairwise-final")
dataset <- sapply( dataset, paste0, collapse="")
gamma <- sapply( gamma, paste0, collapse="")
completeness <- sapply( completeness, paste0, collapse="")
accuracy <- sapply( accuracy, paste0, collapse="")
rules <- sapply( rules, paste0, collapse="")
dataframe <- data.frame(dataset, gamma, completeness, accuracy)
dataframe <- cbind(dataframe, labels = NA)
dataframe[dataframe[,"dataset"]=="iris","labels"] <- 3
dataframe[dataframe[,"dataset"]=="bodyfat","labels"] <- 7
dataframe[dataframe[,"dataset"]=="glass","labels"] <- 6
dataframe[dataframe[,"dataset"]=="housing","labels"] <- 6
dataframe[dataframe[,"dataset"]=="stock","labels"] <- 5
dataframe[dataframe[,"dataset"]=="vehicle","labels"] <- 4
dataframe[dataframe[,"dataset"]=="wine","labels"] <- 3
dataframe[dataframe[,"dataset"]=="cpu-small","labels"] <- 5
dataframe[dataframe[,"dataset"]=="german2005_2009","labels"] <- 5
dataframe[dataframe[,"dataset"]=="portugal2013_2017","labels"] <- 5
dataframe[dataframe[,"dataset"]=="portugal2009_2013","labels"] <- 5
dataframe$gamma=as.numeric(levels(dataframe$gamma))[dataframe$gamma]
dataframe$accuracy=as.numeric(levels(dataframe$accuracy))[dataframe$accuracy]
dataframe$completeness=as.numeric(levels(dataframe$completeness))[dataframe$completeness]
ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
#ggplot(dataframe, aes(x=accuracy, y=completeness, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.5,1.0), limits = c(0,1))+coord_fixed()+facet_wrap(~dataset, nrow = 2, ncol = 4)
#ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=labels))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
ggplot(dataframe, aes(x=accuracy, y=completeness, group=dataset, color=dataset))+geom_point()+geom_path()+scale_x_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+scale_y_continuous(breaks = c(0,0.25,0.5,0.75,1.0), limits = c(0,1))+coord_fixed()
# CORE SCRIPT
isGrid <- F
args = commandArgs(trailingOnly=TRUE)
if (length(args)==1) {
if (args[1] == "grid"){
isGrid <- T
}
}
# dependencies
if (isGrid) {
library("carenR",lib.loc="/homes/up201402671/data/R/lib")
library(arules, lib.loc="/homes/up201402671/data/R/lib")
source("caren_integrated.R")
} else {
require("carenR")
library(arules)
}
source("LRAR/caren.R")
source("LRAR/predictLRAR.R")
source("edira/edira.R")
source("miner.R")
# configurations
isPairwise <- 1
Kfolds <- 10
randomSeed <- 1234
minConfidence <- 70
baseMinSupport <- 1
confThreshold <- 0.05
minLift <- 0
minImprovment <- 0
theta <- 1
# dataset <- "german2005"
# dataset <- "german2009"
# dataset <- "german2005_2009"
# dataset <- "portugal2009"
# dataset <- "portugal2013"
# dataset <- "portugal2009_2013"
# dataset <- "portugal2013_2017_incomplete"
# dataset <- "portugal2013_2017"
load(paste0(dataset,".RDATA"))
# datasets <- list("authorship","bodyfat","calhousing","cpu-small","elevators","fried","glass","housing","iris","pendigits","segment","stock","vehicle","vowel","wine","wisconsin")
datasets <- list("iris")
## FOR DATASETS
for(dataset in datasets) {
if (isGrid) {
load(paste("/homes/up201402671/data/master-dissertation/R/label_ranking_data/",dataset,".RData", sep = ""))
} else {
load(paste("label_ranking_data/",dataset,".RDATA", sep = ""))
}
is2Years <- 0
X <- x
Y <- y
# Randomly shuffle the data
set.seed(randomSeed)
samplerows <- sample(nrow(X))
X <- X[samplerows, ]
Y <- Y[samplerows, ]
pairsLimit <- if(ncol(Y) < 4) ncol(Y) else 4
for(mpairs in 2:2){
maxPairs <<- mpairs
minSupport <<- baseMinSupport
# invoke miner
if(is2Years){
mineRules(X, Y, is2Years, xs = xs, ys = ys)
} else {
# KFold Cross Validation
# Create K equally size folds
folds <- cut(seq(1, nrow(X)), breaks = Kfolds, labels = FALSE)
# Perform K fold cross validation
#mineRules(X, Y, folds = folds, Kfolds = Kfolds)
mineRules(X, Y, folds = folds, Kfolds = Kfolds)
repeat{
exception <- FALSE
result = tryCatch({
#mineRulesTest(X, Y, folds = folds, Kfolds = Kfolds)
}, error = function(e) {
#if(e$message == "subscript out of bounds" &&  e$call == "FUN(X[[i]], ...)"){
if(e$message == "no rules"){
if(minSupport == 1) {
print("#no rules found!")
exception <- TRUE
} else {
print(paste("#no rules found - decreasing support from ",minSupport," to ",minSupport - 5))
minSupport <<- minSupport - 5
e
}
} else if(e$message == "non zero def.rank"){
print(paste("#def.rank can be optimized - decreasing support from ",minSupport," to ",minSupport - 5))
minSupport <<- minSupport - 5
e
} else {
print("#error")
print(e)
exception <- TRUE
}
}, finally = {})
if( !inherits(result, "error") || (inherits(result, "error") && exception) ){
break()
}
}
}
}
}
### FOR ELECTIONS
# for(mpairs in 5:5){
#   is2Years <- 1
#   maxPairs <<- mpairs
#   minSupport <<- 1
#   # invoke miner
#   if(is2Years){
#     mineRules(X, Y, is2Years, xs = xs, ys = ys)
#   } else {
#     # KFold Cross Validation
#     # Randomly shuffle the data
#     set.seed(randomSeed)
#     samplerows <- sample(nrow(X))
#     X <- X[samplerows, ]
#     Y <- Y[samplerows, ]
#
#     # Create K equally size folds
#     folds <- cut(seq(1, nrow(X)), breaks = Kfolds, labels = FALSE)
#
#     # Perform K fold cross validation
#     mineRules(X, Y, folds = folds, Kfolds = Kfolds)
#
#   }
# }
# CORE SCRIPT
isGrid <- F
args = commandArgs(trailingOnly=TRUE)
if (length(args)==1) {
if (args[1] == "grid"){
isGrid <- T
}
}
# dependencies
if (isGrid) {
library("carenR",lib.loc="/homes/up201402671/data/R/lib")
library(arules, lib.loc="/homes/up201402671/data/R/lib")
source("caren_integrated.R")
} else {
require("carenR")
library(arules)
}
source("LRAR/caren.R")
source("LRAR/predictLRAR.R")
source("edira/edira.R")
source("miner.R")
# configurations
isPairwise <- 1
Kfolds <- 10
randomSeed <- 1234
minConfidence <- 70
baseMinSupport <- 1
confThreshold <- 0.05
minLift <- 0
minImprovment <- 0
theta <- 1
# dataset <- "german2005"
# dataset <- "german2009"
# dataset <- "german2005_2009"
# dataset <- "portugal2009"
# dataset <- "portugal2013"
# dataset <- "portugal2009_2013"
# dataset <- "portugal2013_2017_incomplete"
# dataset <- "portugal2013_2017"
load(paste0(dataset,".RDATA"))
# datasets <- list("authorship","bodyfat","calhousing","cpu-small","elevators","fried","glass","housing","iris","pendigits","segment","stock","vehicle","vowel","wine","wisconsin")
datasets <- list("iris")
## FOR DATASETS
for(dataset in datasets) {
if (isGrid) {
load(paste("/homes/up201402671/data/master-dissertation/R/label_ranking_data/",dataset,".RData", sep = ""))
} else {
load(paste("label_ranking_data/",dataset,".RDATA", sep = ""))
}
is2Years <- 0
X <- x
Y <- y
# Randomly shuffle the data
set.seed(randomSeed)
samplerows <- sample(nrow(X))
X <- X[samplerows, ]
Y <- Y[samplerows, ]
pairsLimit <- if(ncol(Y) < 4) ncol(Y) else 4
for(mpairs in 2:2){
maxPairs <<- mpairs
minSupport <<- baseMinSupport
# invoke miner
if(is2Years){
mineRules(X, Y, is2Years, xs = xs, ys = ys)
} else {
# KFold Cross Validation
# Create K equally size folds
folds <- cut(seq(1, nrow(X)), breaks = Kfolds, labels = FALSE)
# Perform K fold cross validation
#mineRules(X, Y, folds = folds, Kfolds = Kfolds)
mineRules(X, Y, folds = folds, Kfolds = Kfolds)
repeat{
exception <- FALSE
result = tryCatch({
#mineRulesTest(X, Y, folds = folds, Kfolds = Kfolds)
}, error = function(e) {
#if(e$message == "subscript out of bounds" &&  e$call == "FUN(X[[i]], ...)"){
if(e$message == "no rules"){
if(minSupport == 1) {
print("#no rules found!")
exception <- TRUE
} else {
print(paste("#no rules found - decreasing support from ",minSupport," to ",minSupport - 5))
minSupport <<- minSupport - 5
e
}
} else if(e$message == "non zero def.rank"){
print(paste("#def.rank can be optimized - decreasing support from ",minSupport," to ",minSupport - 5))
minSupport <<- minSupport - 5
e
} else {
print("#error")
print(e)
exception <- TRUE
}
}, finally = {})
if( !inherits(result, "error") || (inherits(result, "error") && exception) ){
break()
}
}
}
}
}
### FOR ELECTIONS
# for(mpairs in 5:5){
#   is2Years <- 1
#   maxPairs <<- mpairs
#   minSupport <<- 1
#   # invoke miner
#   if(is2Years){
#     mineRules(X, Y, is2Years, xs = xs, ys = ys)
#   } else {
#     # KFold Cross Validation
#     # Randomly shuffle the data
#     set.seed(randomSeed)
#     samplerows <- sample(nrow(X))
#     X <- X[samplerows, ]
#     Y <- Y[samplerows, ]
#
#     # Create K equally size folds
#     folds <- cut(seq(1, nrow(X)), breaks = Kfolds, labels = FALSE)
#
#     # Perform K fold cross validation
#     mineRules(X, Y, folds = folds, Kfolds = Kfolds)
#
#   }
# }
